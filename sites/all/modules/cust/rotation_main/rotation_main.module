<?php
// $Id$

/**
 * @file
 * Stores and displays a rotation and admin content
 *
 */



/**
 * Implements hook_permission().
 */
function rotation_main_permission() {
  return array(
    'administer rotation' => array(
      'title' => t('Administer Rotation module'),
      'description' => t('Perform administration tasks for Rotation module.'),
    ),
    'access Roation blocks' => array(
      'title' => t('Access Rotation blocks'),
      'description' => t('View blocks generated by the Rotation module.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function rotation_main_menu() {
  // Module settings.
  $items['admin/config/content/rotation'] = array(
    'title' => 'Rotation Module',
    'description' => 'Rotation configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rotation_main_admin_settings'),
    'access arguments' => array('administer rotation'),
    'file' => 'rotation_main.admin.inc',
    'file path' => drupal_get_path('module', 'rotation_main'),
  );
  // Advanced Help for Module
  $items['admin/advanced_help/rotation_main'] = array(
    'title' => 'Rotation Module Advanced Help',
    'description' => 'More help with the Rotation module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rotation_main_help'),
    'access arguments' => array('administer rotation'),
    'file' => 'rotation_main.help.inc',
    'file path' => drupal_get_path('module', 'rotation_main'),
  );
  if (module_exists('help')) {
    $items['admin/advanced_help'] = array(
      'title' => 'Advanced help',
      'page callback' => 'rotation_main_help',
      'access arguments' => array('view advanced help index'),
      'file' => 'rotation_main.help.inc',
      'file path' => drupal_get_path('module', 'rotation_main'),
      'weight' => 9,
    );
  }
  else {
    $items['admin/advanced_help'] = array(
      'title' => 'Help',
      'page callback' => 'rotation_main_help',
      'access arguments' => array('view advanced help index'),
      'file' => 'rotation_main.help.inc',
      'file path' => drupal_get_path('module', 'rotation_main'),
      'weight' => 9,
    );
  }
  return $items;
}





function rotation_main_page_build() {
  //Adding CSS
  drupal_add_css(drupal_get_path('module', 'rotation_main') . '/css/rotation.css', array('type' => 'file', 'every_page' => TRUE, 'weight' => 100));


  
  //adds JS libraries to pages
  function rotation_main_library() {
    $libraries['easing'] = array(
        'title' => 'jQuery Easing', 
        'website' => 'http://archive.plugins.jquery.com/project/Easing', 
        'version' => '1.3', 
        'js' => array(
          drupal_get_path('module', 'rotation_main') . '/js/jquery.easing.1.3.js' => array(),
        )
    );
    $libraries['timers'] = array(
        'title' => 'jQuery timers', 
        'website' => 'http://archive.plugins.jquery.com/project/timers', 
        'version' => '1.1.2', 
        'js' => array(
          drupal_get_path('module', 'rotation_main') . '/js/jquery.timers-1.1.2.js' => array(),
        )
    );
    $libraries['hover'] = array(
        'title' => 'jQuery hover Intent', 
        'website' => 'http://cherne.net/brian/resources/jquery.hoverIntent.html', 
        'version' => '1.5.1', 
        'js' => array(
          drupal_get_path('module', 'rotation_main') . '/js/jquery.hoverIntent.js' => array(),
        )
    );
    $libraries['galleryview'] = array(
        'title' => 'jQuery galleryview', 
        'website' => 'http://old.appleton.me/2009/08/gallery-view/', 
        'version' => '1.1', 
        'js' => array(
          drupal_get_path('module', 'rotation_main') . '/js/jquery.galleryview-1.1.js' => array(),
        )
    );
    $libraries['rounded'] = array(
        'title' => 'jQuery corner plugin', 
        'website' => 'http://www.malsup.com/jquery/corner/', 
        'version' => '2.12', 
        'js' => array(
          drupal_get_path('module', 'rotation_main') . '/js/jquery.corner.js' => array(),
        )
    );
  return $libraries;
}

 //Calls JS libraries to be added to pages
 drupal_add_library('rotation_main', 'easing');
 drupal_add_library('rotation_main', 'timers');
 drupal_add_library('rotation_main', 'hover');
 drupal_add_library('rotation_main', 'galleryview');
 drupal_add_library('rotation_main', 'rounded');
    
    
          
    $settings['rotation_main_width'] = variable_get('rotation_main_width', '700');
    $settings['rotation_main_height'] = variable_get('rotation_main_height', '300');
    $settings['rotation_main_transition_interval'] = variable_get('rotation_main_transition_interval', '1200');
    $settings['rotation_main_background_color'] = variable_get('rotation_main_background_color', '#000000');
    $settings['rotation_main_overlay_width'] = variable_get('rotation_main_overlay_width', '200');
    $settings['rotation_main_overlay_height'] = variable_get('rotation_main_overlay_height', '100');
    $settings['rotation_main_overlay_position'] = variable_get('rotation_main_overlay_position', 'bottom');
    $settings['rotation_main_overlay_text_color'] = variable_get('rotation_main_overlay_text_color', '#ffffff');
    $settings['rotation_main_overlay_color'] = variable_get('rotation_main_overlay_color', '#425F78');
    $settings['rotation_main_overlay_opacity'] = variable_get('rotation_main_overlay_opacity', '0.80');
    $settings['rotation_main_frame_width'] = variable_get('rotation_main_frame_width', '100');
    $settings['rotation_main_frame_height'] = variable_get('rotation_main_frame_height', '100');
    $settings['rotation_main_frame_color'] = variable_get('rotation_main_frame_color', '#425F78');
    $settings['rotation_main_filmstrip_border_color'] = variable_get('rotation_main_filmstrip_border_color', '#ffffff');
    $settings['rotation_main_filmstrip_arrow_color'] = variable_get('rotation_main_filmstrip_arrow_color', '#ffffff');
    $settings['rotation_main_filmstrip_position'] = variable_get('rotation_main_filmstrip_position', 'bottom');
    $settings['rotation_main_filmstrip_style'] = variable_get('rotation_main_filmstrip_style', 'thumbnails');
    $settings['rotation_main_show_captions'] = variable_get('rotation_main_show_captions', '0');
    $settings['rotation_main_caption_text_color'] = variable_get('rotation_main_caption_text_color', '#ffffff');
    $settings['rotation_main_caption_height'] = variable_get('rotation_main_caption_height', 20);
    $settings['rotation_main_rounded_corners'] = variable_get('rotation_main_rounded_corners', 'no');
   
  
  
  drupal_add_js(array('rotationMain' => $settings), 'setting');
  
  
  drupal_add_js(drupal_get_path('module', 'rotation_main') . '/js/rotation_main.js', array('type' => 'file', 'scope' => 'footer', 'weight' => 100));
  

  

  
  }

  
  
  
  
  /**
 * Implements hook_block_info().
 */
function rotation_main_block_info() {
  $blocks = array();
  for ($i = 1; $i <= variable_get('rotation_main_number', '1'); $i++) {
    $blocks[$i]['info'] = variable_get('rotation_main_name_' . $i, 'Rotation Location ' . $i) . ' (Rotation Main)';
    // We have too many things changing per user, per page to cache.
    $blocks[$i]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}



/**
 * Implements hook_block_configure().
 */
function rotation_main_block_configure($delta) {

    $form['#theme'] = 'rotation_main_block_form';

    $defult_tax_name_id = rotation_main_get_default_tax_id();

    
    $rt_draggable_taxid = variable_get('rotation_main_taxname_' . $delta, $defult_tax_name_id);


   $form['rotation_main_taxname_' . $delta] = array(
        '#type' => 'select',
        '#title' => t('Select Location'),
        '#description' => t('Select the taxonomy of Rotation Location Rotation Items you want to show up in the is block.  Hit Save to load the form again and then you can re-order the rotations.  If you want to add more Locations you can do it by adding additional taxonomy terms to the <a href="/admin/structure/taxonomy/rotation_tax">"Rotation Location" vocabulary</a>'),
        '#options' => rotation_main_get_tax_term_options('rotation_tax'),
        '#default_value' => variable_get('rotation_main_taxname_' . $delta, $defult_tax_name_id),
        '#required' => TRUE,
      );  



    $form['rotation_main_items']['#tree'] = TRUE;
    
    
    //if (!isset($form['rotation_main_taxname_' . $delta]) && $form['rotation_main_taxname_' . $delta] != 0 ) {
    if ($form['rotation_main_taxname_' . $delta] != 0 ) {
      
    
    
    //Sets variable with the current block taxonomy type from the drop down.
    $tax_tid = $rt_draggable_taxid;
    
    //Join that brings all tables together.
    $query = db_select('node', 'n');
    $query->join('weight_weights', 'b', 'n.nid = b.entity_id');
    $query->join("field_data_rotation_main_category", "t", "n.nid = t.entity_id AND b.entity_id = t.entity_id");
    $query
    ->fields('n', array('nid', 'title'))
    ->fields('b', array('weight'))
    ->fields('t', array('rotation_main_category_tid'))
    ->condition('n.type', 'rotation_main')
    ->condition('n.status', '1')
    ->condition('t.rotation_main_category_tid', $tax_tid)
    ->orderBy('b.weight', 'ASC')
    ->addTag('node_access');
    
    $result = $query->execute();
    
    foreach ($result as $record) {
   
        
             // Create a form entry for this item.
          //
          // Each entry will be an array using the the unique id for that item as
          // the array key, and an array of table row data as the value.
          //$nid = $term;
          //$node = node_load($nid);

          
          $nid = $record->nid;
          $rt_title = $record->title;
          $rt_weight = $record->weight;
          
            // Create a form entry for this item.
            //
            // Each entry will be an array using the the unique id for that item as
            // the array key, and an array of table row data as the value.
            $form['rotation_main_items'][$nid] = array(

              // We'll use a form element of type '#markup' to display the item name.
              'name' => array(
                '#markup' => t($rt_title),
              ),

              // We'll use a form element of type '#textfield' to display the item
              // description, which will allow the value to be changed via the form.
              // We limit the input to 255 characters, which is the limit we set on
              // the database field.
              
              

              // The 'weight' field will be manipulated as we move the items around in
              // the table using the tabledrag activity.  We use the 'weight' element
              // defined in Drupal's Form API.
              'weight' => array(
                '#type' => 'weight',
                '#title' => t('Weight'),
                '#default_value' => $rt_weight,
                '#delta' => 100,
                '#title-display' => 'invisible',
              ),
            );
          
         
        }
    }
    else {
      $form['rotation_dragable_placeholder'] = array(
      '#type' => 'markup',
      '#markup' => t('<p><span style="font-weight:bold; font-size:16px;">Select Select Taxonomy Location From Above:</span><br />Once you select a rotation and save this page it will re-load and this spot will be replaced with a dragable and sortable listing of all the rotations.</p>')
      );
  }


  $form['rotation_description'] = array(
    '#type' => 'markup',
    '#markup' => t('<p><span style="font-weight:bold; font-size:16px; color:#FF0000;">IMPORTANT PLEASE READ:</span><br />Please scroll down to "Visibility settings" and make sure that "Pages" is set to "Only The Listed Pages" and then put in the page you want this to show up on.  Example use <strong>&lt;front&gt;</strong> will only display this block on the front page.  <strong>If you do not do this it will automatically show up on every page.</strong></p>')
    );
  
 
  
  return $form;
}

/**
 * Implements hook_block_save().
 */
function rotation_main_block_save($delta, $edit) {
  variable_set('rotation_main_taxname_' . $delta, $edit['rotation_main_taxname_' . $delta]);
  
  //drupal_set_message(var_dump($edit));
  //var_dump($edit);
  // Because the form elements were keyed with the item ids from the database,
  // we can simply iterate through the submitted values.
  // Updates for dragable weights in each block
  
  foreach ($edit['rotation_main_items'] as $id => $item) {
    db_query(
      "UPDATE {weight_weights} SET weight = :weight WHERE entity_id = :id",
      array(':weight' => $item['weight'], ':id' => $id)
    );
  }
  
}


/**
 * Implements hook_block_view().
 */
function rotation_main_block_view($delta) {
 

    $rt_gettaxid = rotation_main_get_nids_from_tax_for_block($delta, $tax_name = NULL);
    
    $build_rotation = rotation_main_buildHTMLroation($rt_gettaxid);
  
    $block['content'] = $build_rotation;
    return $block;
  
}



function rotation_main_get_tax_term_options($machine_name) {
    $options = array( '0' => '');

    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;

    $options_source = taxonomy_get_tree($vid);

    foreach ($options_source as $item) {
        $key = $item->tid;
        $value = $item->name;
        $options[$key] = $value;
    }

    return $options;
}



//Pass an array of varables you want to add to rotation html page and write html
function rotation_main_buildHTMLroation($rt_gettaxid) {
  
  
  if ($rt_gettaxid != 0) {
  
  $htmlpanels = '';
  $htmlfilmstrip = '';
  $output = '';
  $i = 1;
  
  
  
  
  
    $tax_tid = $rt_gettaxid;
    
    //Join that brings all tables together.
    $query = db_select('node', 'n');
    $query->join('weight_weights', 'b', 'n.nid = b.entity_id');
    $query->join("field_data_rotation_main_category", "t", "n.nid = t.entity_id AND b.entity_id = t.entity_id");
    $query->join("field_data_rotation_main_caption", "c", "n.nid = c.entity_id AND b.entity_id = c.entity_id AND t.entity_id = c.entity_id");
    $query->join("field_revision_rotation_main_new_window", "w", "n.nid = w.entity_id AND b.entity_id = w.entity_id AND t.entity_id = w.entity_id AND c.entity_id = w.entity_id");
    
    $query->join("field_data_body", "bb", "n.nid = bb.entity_id AND b.entity_id = bb.entity_id AND t.entity_id = bb.entity_id AND c.entity_id = bb.entity_id AND w.entity_id = bb.entity_id");
    $query->join("field_data_rotation_main_url", "u", "n.nid = u.entity_id AND b.entity_id = u.entity_id AND t.entity_id = u.entity_id AND c.entity_id = u.entity_id AND w.entity_id = u.entity_id AND bb.entity_id = u.entity_id");
    
    $query->join("field_data_rotation_main_thumb_image", "s", "n.nid = s.entity_id AND b.entity_id = s.entity_id AND t.entity_id = s.entity_id AND c.entity_id = s.entity_id AND w.entity_id = s.entity_id AND u.entity_id = s.entity_id AND s.entity_id = bb.entity_id");
    
    $query->join("field_data_rotation_main_large_image", "l", "n.nid = l.entity_id AND b.entity_id = l.entity_id AND t.entity_id = l.entity_id AND c.entity_id = l.entity_id AND w.entity_id = l.entity_id AND l.entity_id = bb.entity_id");
    $query->join("file_managed", "f", "f.fid = l.rotation_main_large_image_fid");
    
    //$query->join("file_managed", "f");
    //$query->join("field_data_rotation_main_thumb_image", "s", "f.fid = s.rotation_main_thumb_image_fid");
    //$query->join("field_data_rotation_main_large_image", "l", "f.fid = l.rotation_main_large_image_fid AND s.rotation_main_thumb_image_fid = l.rotation_main_large_image_fid");
    
    $query
    ->fields('n', array('nid', 'title', 'language', 'status'))
    ->fields('b', array('weight'))
    ->fields('t', array('rotation_main_category_tid'))
    ->fields('c', array('rotation_main_caption_value'))
    ->fields('w', array('rotation_main_new_window_value'))
    ->fields('l', array('rotation_main_large_image_fid'))
    //->fields('s', array('rotation_main_thumb_image_fid'))
    ->fields('bb', array('body_value'))
    ->fields('u', array('rotation_main_url_value'))
    ->fields('f', array('fid', 'filename', 'uri', 'filemime'))
    ->condition('n.type', 'rotation_main')
    ->condition('n.status', '1')
    ->condition('t.rotation_main_category_tid', $tax_tid)
    ->orderBy('b.weight', 'ASC')
    ->addTag('node_access');
    
    $result = $query->execute();
    
    foreach ($result as $record) {
  
  
  
  
   //$nid = $term;
   //$node = node_load($nid);
  
   $newwindow = '';

    //Build Containter with images and overlay
    //Get all Variables
    //concatinate each loop
    $rt_nid = $record->nid;
    $rt_title = $record->title;
    $rt_body = $record->body_value;
    $rt_url = $record->rotation_main_url_value;
    $rt_image_uri = $record->uri;
    $rt_image = file_create_url($rt_image_uri);
    $rt_newwindow = $record->rotation_main_new_window_value;
    //$rt_published = $record->status;

    //if($rt_published == 1) {
    
        if ($rt_newwindow == 'yes') {
          $newwindow = ' target="_blank"';
        }
        
        
        
        $htmlpanels .= '<div class="panel">';
          
          
          //image tag
          $htmlpanels .= '<a href="' . $rt_url . '"' . $newwindow . '><img src="' . $rt_image . '" title="' . $rt_title . '" alt="' . $rt_title . '" /></a>';
              
          //Overlay Tag
          $htmlpanels .= '<div class="panel-overlay">';
          
            //Title
            $htmlpanels .= '<h2><a href="' . $rt_url . '"' . $newwindow . '>' . $rt_title . '</a></h2>';
            
            //Body
            $htmlpanels .= $rt_body;
              
          $htmlpanels .= '</div>';
          
        $htmlpanels .= '</div>';
          
         
        //build filmstrip
        //Get all Variables
        //concatinate each loop
        
        //get NID and get thumb inforamation
        //SELECT n.nid, ss.entity_id, f.fid, f.filename, f.uri, f.filemime  FROM node AS n INNER JOIN field_data_rotation_main_thumb_image AS ss ON n.nid=ss.entity_id INNER JOIN file_managed AS f ON f.fid=ss.rotation_main_thumb_image_fid
        /*$query2 = db_select('node', 'nn');
        $query2->join("field_data_rotation_main_thumb_image", "ss", "nn.nid = ss.entity_id");
        $query2->join("file_managed", "ff", "ff.fid = ss.rotation_main_thumb_image_fid");
        $query2->fields('nn', array('nid'))
        ->fields('ss', array('rotation_main_thumb_image_fid'))
        ->fields('ff', array('fid','filename','uri','filemime'))
        ->condition('nid', $rt_nid);
        
        $result2 = $query->execute();
        
        foreach ($result2 as $record2) {*/
        
        $resultThumb = db_query("SELECT ss.entity_id, ss.rotation_main_thumb_image_fid, ff.fid, ff.filename, ff.uri, ff.filemime FROM {field_data_rotation_main_thumb_image} AS ss INNER JOIN {file_managed} AS ff ON ss.rotation_main_thumb_image_fid=ff.fid WHERE ss.entity_id = :nid", array(':nid' => $rt_nid));

            $arraysToBuild1 = array();

            foreach ($resultThumb as $row) {
             
                $rt_thumb_uri = $row->uri;

            }

            $rt_thumb = file_create_url($rt_thumb_uri);
            $rt_caption = $record->rotation_main_caption_value;
        
            $rt_filmstrip_style = variable_get('rotation_main_filmstrip_style', 'thumbnails');
            if ($rt_filmstrip_style == 'thumbnails') {
                

                $htmlfilmstrip .= '<li><div class="imageWrapper"><img src="' . $rt_thumb . '" alt="' . $rt_title . '" title="' . $rt_title . '" /></div>';
                
                
                $has_caption = variable_get('rotation_main_show_captions', '0');
                
                //Check if captions are true
                if ($has_caption == 1) {
                    $htmlfilmstrip .= '<div class="caption">' . $rt_caption . '</div>';
                }
                
                  $htmlfilmstrip .= '</li>';
                }
                else {

                    $htmlfilmstrip .= '<li class="rotationList"><div class="numberWrapper">' . $i . '</div><div class="popupWrapper"><div class="imageWrapper"><img src="' . $rt_thumb . '" alt="' . $rt_title . '" title="' . $rt_title . '" /></div>';
                    
                    
                    $has_caption = variable_get('rotation_main_show_captions', '0');
                    
                    //Check if captions are true
                    if ($has_caption == 1) {
                        $htmlfilmstrip .= '<div class="caption">' . $rt_caption . '</div>';
                    }
                    
                      $htmlfilmstrip .= '<div class="rotation-arrow"></div></div></li>';
                
                }
            //}
         
         $i++;
         //}
    }

      $noFilmStrip = variable_get('rotation_main_filmstrip_position', 'bottom');
  
  //Check if filmstrip is true  
  if ($noFilmStrip != 'none') {
      $output .= '<div id="rotation" class="galleryview">';
          $output .= $htmlpanels;
          $output .= '<ul class="filmstrip">';
            $output .= $htmlfilmstrip;
          $output .= '</ul>';
      $output .= '</div>';
  }
  else{
      $output .= '<div id="rotation" class="galleryview">';
          $output .= $htmlpanels;
      $output .= '</div>';
  }
  
  //return output
  return $output;
 }
 else{ 
    return;
 }
      
}


/**
 * Gets the defualt roation ID by taxonomy machine name 'rotation_tax'
 */
function rotation_main_get_default_tax_id() {
    
    $rt_vocabulary = rotation_main_get_tax_term_options('rotation_tax');
    
    //sort alphabetically
    ksort($rt_vocabulary);
    
    //removes the first array because it is empty "" from function call
    array_shift($rt_vocabulary);
    
    $defult_tax_name_id = $rt_vocabulary[0];
    
    return $defult_tax_name_id;
}



function rotation_main_get_nids_from_tax_for_block($delta = NULL, $tax_name = NULL) {

    if (empty($tax_name)) {
        
        $defult_tax_name_id = rotation_main_get_default_tax_id();
        
        //pass in which taxonomy name they want to use for a block
        $rt_taxonomyID = variable_get('rotation_main_taxname_' . $delta, $defult_tax_name_id);
    }
    else{
        $rt_taxonomyID = $tax_name;
    }


    /*$result = db_query("SELECT nid FROM {taxonomy_index} WHERE tid = :tid", array(':tid' => $rt_taxonomyID));

    $arraysToBuild1 = array();

    foreach ($result as $row) {
     
        $arraysToBuild1[] = $row;

    }


    //set temp variables
    $temp_array_length = count($arraysToBuild1);
    $temp_counter = 0;
    $arraysToBuild2 = array();

    //main loop
    for ($temp_counter = 0; $temp_counter < $temp_array_length; $temp_counter++) {
        $arraysToBuild2[] = $arraysToBuild1[$temp_counter]->nid;
    }
    
    return $arraysToBuild2;*/
    
    return $rt_taxonomyID;

}



/**
 * Implements hook_theme().
 *
 * We need run our forms through custom theme functions in order to build the
 * table structure which is required by tabledrag.js.  Before we can use our
 * custom theme functions, we need to implement hook_theme in order to register
 * them with Drupal.
 *
 * We are defining our theme hooks with the same name as the form generation
 * function so that Drupal automatically calls our theming function when the
 * form is displayed.
 */
function rotation_main_theme($variables) {
  return array(
    // Theme function for the 'sortable' block form
    'rotation_main_block_form' => array(
      'render element' => 'form',
      'file' => 'rotation_main_block_form.inc',
    ),
  );
}